{"entities": [{"name": "Brooklyn Node", "type": "org.apache.brooklyn.entity.brooklynnode.BrooklynNode", "iconUrl": "", "effectors": [{"returnType": "java.lang.String", "name": "deployBlueprint", "parameters": [{"defaultValue": null, "type": "java.lang.String", "name": "blueprintType", "description": "blueprintType"}, {"defaultValue": null, "type": "java.util.Map", "name": "blueprintConfig", "description": "blueprintConfig"}, {"defaultValue": null, "type": "java.util.Map", "name": "blueprintPlan", "description": "CAMP plan for the blueprint to be deployed; currently only supports Java map or JSON string (not yet YAML)"}], "description": "Deploy a blueprint, either given a plan (as Java map or JSON string for a map), or given URL and optional config"}, {"returnType": "void", "name": "populateServiceNotUpDiagnostics", "parameters": [], "description": "Populates the attribute service.notUp.diagnostics, with any available health indicators"}, {"returnType": "void", "name": "restart", "parameters": [], "description": "Restart the process/service represented by an entity"}, {"returnType": "org.apache.brooklyn.api.mgmt.ha.ManagementNodeState", "name": "setHighAvailabilityMode", "parameters": [{"defaultValue": null, "type": "org.apache.brooklyn.api.mgmt.ha.HighAvailabilityMode", "name": "mode", "description": "HA mode"}], "description": "Set the HA mode on the node, returning the existing state"}, {"returnType": "java.lang.Integer", "name": "setHighAvailabilityPriority", "parameters": [{"defaultValue": null, "type": "java.lang.Integer", "name": "priority", "description": "HA priority"}], "description": "Set the HA priority on the node, returning the old priority"}, {"returnType": "java.lang.Void", "name": "shutdown", "parameters": [{"defaultValue": null, "type": "java.lang.Boolean", "name": "stopAppsFirst", "description": "Whether to stop apps before shutting down"}, {"defaultValue": null, "type": "java.lang.Boolean", "name": "forceShutdownOnError", "description": "Force shutdown if apps fail to stop or timeout"}, {"defaultValue": null, "type": "org.apache.brooklyn.util.time.Duration", "name": "shutdownTimeout", "description": "A maximum delay to wait for apps to gracefully stop before giving up or forcibly exiting"}, {"defaultValue": null, "type": "org.apache.brooklyn.util.time.Duration", "name": "requestTimeout", "description": "Maximum time to block the request for the shutdown to finish, 0 to wait infinitely"}, {"defaultValue": null, "type": "org.apache.brooklyn.util.time.Duration", "name": "delayForHttpReturn", "description": "The delay before exiting the process, to permit the REST response to be returned"}], "description": "Shutdown the remote brooklyn instance (stops via the REST API only; leaves any VM)"}, {"returnType": "void", "name": "start", "parameters": [{"defaultValue": null, "type": "java.lang.Object", "name": "locations", "description": "The location or locations to start in, as a string, a location object, a list of strings, or a list of location objects"}], "description": "Start the process/service represented by an entity"}, {"returnType": "void", "name": "stop", "parameters": [], "description": "Stop the process/service represented by an entity"}, {"returnType": "java.lang.Void", "name": "stopNodeAndKillApps", "parameters": [{"defaultValue": {"nanos": 3600000000000}, "type": "org.apache.brooklyn.util.time.Duration", "name": "timeout", "description": "How long to wait before giving up on stopping the node"}], "description": "Stop all apps managed by the Brooklyn process, stop the process, and any VM created, and unmanage this entity"}, {"returnType": "java.lang.Void", "name": "stopNodeButLeaveApps", "parameters": [{"defaultValue": {"nanos": 3600000000000}, "type": "org.apache.brooklyn.util.time.Duration", "name": "timeout", "description": "How long to wait before giving up on stopping the node"}], "description": "Stop the Brooklyn process, and any VM created, and unmanage this entity; but if it was managing other applications, leave them running"}], "sensors": [{"type": "java.lang.String", "name": "brooklynnode.app", "links": {}, "description": "Application (fully qualified class name) to launch using the brooklyn CLI"}, {"type": "java.util.List", "name": "brooklynnode.classpath", "links": {}, "description": "classpath to use, as list of URL entries"}, {"type": "java.util.Map", "name": "brooklynnode.copytorundir", "links": {}, "description": "URLs of resources to be copied across to the server, giving the path they are to be copied to"}, {"type": "org.apache.brooklyn.api.mgmt.ha.ManagementNodeState", "name": "brooklynnode.ha.state", "links": {}, "description": "High-availability state of the management node (MASTER, HOT_STANDBY, etc)"}, {"type": "java.lang.String", "name": "brooklynnode.locations", "links": {}, "description": "Locations to use when launching the app"}, {"type": "java.net.InetAddress", "name": "brooklynnode.webconsole.address.bind", "links": {}, "description": "Specifies the IP address of the NIC to bind the Brooklyn Management Console to (default 0.0.0.0)"}, {"type": "java.net.InetAddress", "name": "brooklynnode.webconsole.address.public", "links": {}, "description": "Specifies the public IP address or hostname for the Brooklyn Management Console"}, {"type": "java.util.List", "name": "brooklynnode.webconsole.enabledHttpProtocols", "links": {}, "description": "List of enabled protocols (e.g. http, https)"}, {"type": "java.lang.Integer", "name": "brooklynnode.webconsole.httpPort", "links": {}, "description": "HTTP Port for the brooklyn web-console"}, {"type": "java.lang.Integer", "name": "brooklynnode.webconsole.httpsPort", "links": {}, "description": "HTTPS Port for the brooklyn web-console"}, {"type": "java.lang.Boolean", "name": "brooklynnode.webconsole.nosecurity", "links": {}, "description": "Whether to start the web console with no security"}, {"type": "java.lang.Boolean", "name": "brooklynnode.webconsole.up", "links": {}, "description": "Whether the web console is responding normally"}, {"type": "java.net.URI", "name": "brooklynnode.webconsole.url", "links": {}, "description": "URL of the brooklyn web-console"}, {"type": "java.util.Map", "name": "download.addon.urls", "links": {}, "description": "URL patterns for downloading named add-ons (will substitute things like ${version} automatically)"}, {"type": "java.lang.String", "name": "download.url", "links": {}, "description": "URL pattern for downloading the installer (will substitute things like ${version} automatically)"}, {"type": "java.lang.String", "name": "expandedinstall.dir", "links": {}, "description": "Directory for installed artifacts (e.g. expanded dir after unpacking .tgz)"}, {"type": "java.lang.String", "name": "host.address", "links": {}, "description": "Host IP address"}, {"type": "java.lang.String", "name": "host.name", "links": {}, "description": "Host name"}, {"type": "java.lang.String", "name": "host.subnet.address", "links": {}, "description": "Host address as known internally in the subnet where it is running (if different to host.name)"}, {"type": "java.lang.String", "name": "host.subnet.hostname", "links": {}, "description": "Host name as known internally in the subnet where it is running (if different to host.name)"}, {"type": "java.lang.String", "name": "install.dir", "links": {}, "description": "Directory for this software to be installed in"}, {"type": "java.lang.String", "name": "run.dir", "links": {}, "description": "Directory for this software to be run from"}, {"type": "java.lang.Boolean", "name": "service.isUp", "links": {}, "description": "Whether the service is active and availability (confirmed and monitored)"}, {"type": "java.lang.Boolean", "name": "service.process.isRunning", "links": {}, "description": "Whether the process for the service is confirmed as running"}, {"type": "org.apache.brooklyn.core.entity.lifecycle.Lifecycle", "name": "service.state", "links": {}, "description": "Actual lifecycle state of the service"}, {"type": "org.apache.brooklyn.core.entity.lifecycle.Lifecycle$Transition", "name": "service.state.expected", "links": {}, "description": "Last controlled change to service state, indicating what the expected state should be"}, {"type": "java.lang.String", "name": "softwareprocess.pid.file", "links": {}, "description": "PID file"}, {"type": "org.apache.brooklyn.api.location.MachineProvisioningLocation", "name": "softwareservice.provisioningLocation", "links": {}, "description": "Location used to provision a machine where this is running"}], "defaultVersion": "0.9.0-SNAPSHOT", "config": [{"type": "java.lang.String", "name": "archive.nameFormat", "reconfigurable": false, "description": "The format for the directory created when the installation archive is extracted, if required. The version string will be passed in as the first argument, replacing the %s format specifier"}, {"type": "java.lang.String", "name": "brooklynnode.app", "reconfigurable": false, "description": "Application (fully qualified class name) to launch using the brooklyn CLI"}, {"type": "java.lang.String", "name": "brooklynnode.brooklyncatalog.contents", "reconfigurable": false, "description": "Contents for the brooklyn catalog.xml file (uploaded to ~/.brooklyn/catalog.xml)"}, {"defaultValue": "${HOME}/.brooklyn/catalog.xml", "type": "java.lang.String", "name": "brooklynnode.brooklyncatalog.remotepath", "reconfigurable": false, "description": "Remote path for the brooklyn catalog.xml file to be uploaded"}, {"type": "java.lang.String", "name": "brooklynnode.brooklyncatalog.uri", "reconfigurable": false, "description": "URI for the brooklyn catalog.xml file (uploaded to ~/.brooklyn/catalog.xml)"}, {"type": "java.lang.String", "name": "brooklynnode.brooklynproperties.global.contents", "reconfigurable": false, "description": "Contents for the global brooklyn properties file (uploaded to ~/.brooklyn/brooklyn.properties)"}, {"defaultValue": "${HOME}/.brooklyn/brooklyn.properties; only useful for testing as this path will not be used on the remote system", "type": "java.lang.String", "name": "brooklynnode.brooklynproperties.global.remotepath", "reconfigurable": false, "description": "Remote path for the global brooklyn.properties file to be uploaded"}, {"type": "java.lang.String", "name": "brooklynnode.brooklynproperties.global.uri", "reconfigurable": false, "description": "URI for the global brooklyn properties file (uploaded to ~/.brooklyn/brooklyn.properties)"}, {"type": "java.lang.String", "name": "brooklynnode.brooklynproperties.local.contents", "reconfigurable": false, "description": "Contents for the launch-specific brooklyn properties file"}, {"defaultValue": "${driver.runDir}/brooklyn-local.properties", "type": "java.lang.String", "name": "brooklynnode.brooklynproperties.local.remotepath", "reconfigurable": false, "description": "Remote path for the launch-specific brooklyn.properties file to be uploaded"}, {"type": "java.lang.String", "name": "brooklynnode.brooklynproperties.local.uri", "reconfigurable": false, "description": "URI for the launch-specific brooklyn properties file"}, {"defaultValue": [], "type": "java.util.List", "name": "brooklynnode.classpath", "reconfigurable": false, "description": "classpath to use, as list of URL entries"}, {"defaultValue": {}, "type": "java.util.Map", "name": "brooklynnode.copytorundir", "reconfigurable": false, "description": "URLs of resources to be copied across to the server, giving the path they are to be copied to"}, {"type": "java.lang.String", "name": "brooklynnode.customization.extraScript", "reconfigurable": false, "description": "Optional additional script commands to run as part of customization; this might e.g. ensure id_rsa is set up"}, {"type": "java.lang.String", "name": "brooklynnode.distro.uploadurl", "reconfigurable": false, "description": "URL for uploading the brooklyn distro (retrieved locally and pushed to remote install location. Takes precedence over downloadUrl, if non-null)"}, {"type": "java.lang.String", "name": "brooklynnode.download.archive.subpath", "reconfigurable": false, "description": "Path to the main directory in the archive being supplied for installation; to use the root of an archive, specify '.'; default value taken based on download URL (e.g. 'name' for 'http://path/name.tgz' or 'http://path/name-dist.tgz') falling back to an appropriate value for brooklyn, e.g. 'brooklyn-0.9.0-SNAPSHOT'"}, {"defaultValue": "bin/brooklyn", "type": "java.lang.String", "name": "brooklynnode.launch.command", "reconfigurable": false, "description": "Path to the script to launch Brooklyn / the app relative to the subpath in the archive, defaulting to 'bin/brooklyn'"}, {"defaultValue": true, "type": "java.lang.Boolean", "name": "brooklynnode.launch.command.pid.updated", "reconfigurable": false, "description": "Whether the launch script creates/updates the PID file, if not the entity will do so, but note it will not necessarily kill sub-processes"}, {"type": "java.lang.String", "name": "brooklynnode.launch.parameters.extra", "reconfigurable": false, "description": "Launch parameters passed on the CLI, in addition to 'launch' and parameters implied by other config keys (and placed afterwards on the command line)"}, {"type": "java.lang.String", "name": "brooklynnode.locations", "reconfigurable": false, "description": "Locations to use when launching the app"}, {"type": "java.lang.String", "name": "brooklynnode.managementPassword", "reconfigurable": false, "description": "Password for MANAGEMENT_USER"}, {"defaultValue": "admin", "type": "java.lang.String", "name": "brooklynnode.managementUser", "reconfigurable": false, "description": "The user for logging into the brooklyn web-console (also used for health-checks)"}, {"defaultValue": "2s", "type": "org.apache.brooklyn.util.time.Duration", "name": "brooklynnode.poll_period", "reconfigurable": false, "description": "Frequency to poll for client sensors"}, {"name": "brooklynnode.properties.file.ifExists", "defaultValue": "FAIL", "reconfigurable": false, "possibleValues": [{"description": "DO_NOT_USE", "value": "DO_NOT_USE"}, {"description": "USE_EXISTING", "value": "USE_EXISTING"}, {"description": "OVERWRITE", "value": "OVERWRITE"}, {"description": "FAIL", "value": "FAIL"}], "type": "java.lang.Enum", "description": "What to do in the case where a global brooklyn.properties already exists"}, {"defaultValue": "0.0.0.0/0.0.0.0", "type": "java.net.InetAddress", "name": "brooklynnode.webconsole.address.bind", "reconfigurable": false, "description": "Specifies the IP address of the NIC to bind the Brooklyn Management Console to (default 0.0.0.0)"}, {"type": "java.net.InetAddress", "name": "brooklynnode.webconsole.address.public", "reconfigurable": false, "description": "Specifies the public IP address or hostname for the Brooklyn Management Console"}, {"defaultValue": ["http"], "type": "java.util.List", "name": "brooklynnode.webconsole.enabledHttpProtocols", "reconfigurable": false, "description": "List of enabled protocols (e.g. http, https)"}, {"defaultValue": "8081-65535", "type": "org.apache.brooklyn.api.location.PortRange", "name": "brooklynnode.webconsole.httpPort", "reconfigurable": false, "description": "HTTP Port for the brooklyn web-console"}, {"defaultValue": "8443-65535", "type": "org.apache.brooklyn.api.location.PortRange", "name": "brooklynnode.webconsole.httpsPort", "reconfigurable": false, "description": "HTTPS Port for the brooklyn web-console"}, {"defaultValue": false, "type": "java.lang.Boolean", "name": "brooklynnode.webconsole.nosecurity", "reconfigurable": false, "description": "Whether to start the web console with no security"}, {"defaultValue": "identity", "type": "com.google.common.base.Function", "name": "brooklynnode.webconsole.portMapper", "reconfigurable": false, "description": "Function for mapping private to public ports, for use in inferring the brooklyn URI"}, {"name": "children.startable.mode", "defaultValue": "NONE", "reconfigurable": false, "possibleValues": [{"description": "NONE", "value": "NONE"}, {"description": "FOREGROUND", "value": "FOREGROUND"}, {"description": "FOREGROUND_LATE", "value": "FOREGROUND_LATE"}, {"description": "BACKGROUND", "value": "BACKGROUND"}, {"description": "BACKGROUND_LATE", "value": "BACKGROUND_LATE"}], "type": "java.lang.Enum", "description": "Controls behaviour when starting Startable children as part of this entity's lifecycle."}, {"type": "java.lang.Boolean", "name": "customize.latch", "reconfigurable": false, "description": "Latch for blocking customize until ready"}, {"defaultValue": false, "type": "java.lang.Boolean", "name": "dontRequireTtyForSudo", "reconfigurable": false, "description": "Whether to explicitly set /etc/sudoers, so don't need tty (will leave unchanged if 'false'); some machines require a tty for sudo; brooklyn by default does not use a tty (so that it can get separate error+stdout streams); you can enable a tty as an option to every ssh command, or you can do it once and modify the machine so that a tty is not subsequently required."}, {"type": "java.util.Map", "name": "download.addon.urls", "reconfigurable": false, "description": "URL patterns for downloading named add-ons (will substitute things like ${version} automatically)"}, {"defaultValue": "<#if version?contains(\"SNAPSHOT\")>https://repository.apache.org/service/local/artifact/maven/redirect?r=snapshots&g=org.apache.brooklyn&v=${version}&a=brooklyn-dist&c=dist&e=tar.gz<#else>http://search.maven.org/remotecontent?filepath=org/apache/brooklyn/brooklyn-dist/${version}/brooklyn-dist-${version}-dist.tar.gz</#if>", "type": "java.lang.String", "name": "download.url", "reconfigurable": false, "description": "URL pattern for downloading the installer (will substitute things like ${version} automatically)"}, {"type": "java.lang.Boolean", "name": "entity.running", "reconfigurable": false, "description": "Skip the startup process entirely, if service already running"}, {"type": "java.lang.Boolean", "name": "entity.started", "reconfigurable": false, "description": "Skip the startup process entirely, for running services"}, {"type": "java.lang.String", "name": "expandedinstall.dir", "reconfigurable": false, "description": "Directory for installed artifacts (e.g. expanded dir after unpacking .tgz)"}, {"type": "java.util.Map", "name": "files.install", "reconfigurable": false, "description": "Mapping of files, to be copied before install, to destination name relative to installDir"}, {"type": "java.util.Map", "name": "files.preinstall", "reconfigurable": false, "description": "Mapping of files, to be copied before install, to destination name relative to installDir"}, {"type": "java.util.Map", "name": "files.runtime", "reconfigurable": false, "description": "Mapping of files, to be copied before customisation, to destination name relative to runDir"}, {"defaultValue": true, "type": "java.lang.Boolean", "name": "inboundPorts.autoInfer", "reconfigurable": false, "description": "If set to false turns off the opening of ports based on naming convention, and also those that are of type PortRange in Java entities"}, {"defaultValue": ".*\\.port", "type": "java.lang.String", "name": "inboundPorts.configRegex", "reconfigurable": false, "description": "Regex governing the opening of ports based on config names"}, {"defaultValue": "${config['onbox.base.dir']!config['brooklyn.datadir']!'/<ERROR>-ONBOX_BASE_DIR-not-set'}/installs/${(config['install.unique_label']??)?string(config['install.unique_label']!'X',(entity.entityType.simpleName)+((config['install.version']??)?string('_'+(config['install.version']!'X'),'')))}", "type": "java.lang.String", "name": "install.dir", "reconfigurable": false, "description": "Directory for this software to be installed in"}, {"type": "java.lang.Boolean", "name": "install.latch", "reconfigurable": false, "description": "Latch for blocking install until ready"}, {"type": "java.lang.Boolean", "name": "install.skip", "reconfigurable": false, "description": "Skip the driver install commands entirely, for pre-installed software"}, {"type": "java.lang.String", "name": "install.unique_label", "reconfigurable": false, "description": "Provides a label which uniquely identifies an installation, used in the computation of the install dir; this should include something readable, and must include a hash of all data which differentiates an installation (e.g. version, plugins, etc), but should be the same where install dirs can be shared to allow for re-use"}, {"defaultValue": "0.9.0-SNAPSHOT", "type": "java.lang.String", "name": "install.version", "reconfigurable": false, "description": "Suggested version"}, {"defaultValue": true, "type": "java.lang.Boolean", "name": "java.check.hostname.bug", "reconfigurable": false, "description": "Check whether hostname is too long and will likely crash Javadue to bug 7089443"}, {"defaultValue": [], "type": "java.util.Set", "name": "java.opts", "reconfigurable": false, "description": "Java command line options"}, {"defaultValue": {}, "type": "java.util.Map", "name": "java.sysprops", "reconfigurable": false, "description": "Java command line system properties"}, {"defaultValue": "1.7", "type": "java.lang.String", "name": "java.version.required", "reconfigurable": false, "description": "Java version required"}, {"type": "java.lang.Boolean", "name": "launch.latch", "reconfigurable": false, "description": "Latch for blocking launch until ready"}, {"defaultValue": true, "type": "java.lang.Boolean", "name": "metrics.usage.retrieve", "reconfigurable": false, "description": "Whether to retrieve the usage (e.g. performance) metrics"}, {"defaultValue": false, "type": "java.lang.Boolean", "name": "openIptables", "reconfigurable": false, "description": "Whether to open the INBOUND_PORTS via iptables rules; if true then ssh in to run iptables commands, as part of machine provisioning"}, {"type": "java.lang.String", "name": "post.customize.command", "reconfigurable": false, "description": "Command to be run after the customize method being called on the driver"}, {"type": "java.lang.String", "name": "post.install.command", "reconfigurable": false, "description": "Command to be run after the install method being called on the driver"}, {"type": "java.lang.String", "name": "post.launch.command", "reconfigurable": false, "description": "Command to be run after the launch method being called on the driver"}, {"type": "java.lang.String", "name": "pre.customize.command", "reconfigurable": false, "description": "Command to be run prior to the customize method being called on the driver"}, {"type": "java.lang.String", "name": "pre.install.command", "reconfigurable": false, "description": "Command to be run prior to the install method being called on the driver"}, {"type": "java.lang.String", "name": "pre.launch.command", "reconfigurable": false, "description": "Command to be run prior to the launch method being called on the driver"}, {"defaultValue": {}, "type": "java.util.Map", "name": "provisioning.properties", "reconfigurable": false, "description": "Custom properties to be passed in when provisioning a new machine"}, {"defaultValue": [22], "type": "java.util.Collection", "name": "requiredOpenLoginPorts", "reconfigurable": false, "description": "The port(s) to be opened, to allow login"}, {"type": "java.lang.Boolean", "name": "resources.install.latch", "reconfigurable": false, "description": "Latch for blocking install resources until ready"}, {"type": "java.lang.Boolean", "name": "resources.runtime.latch", "reconfigurable": false, "description": "Latch for blocking runtime resources until ready"}, {"defaultValue": "${config['onbox.base.dir']!config['brooklyn.datadir']!'/<ERROR>-ONBOX_BASE_DIR-not-set'}/apps/${entity.applicationId}/entities/${entity.entityType.simpleName}_${entity.id}", "type": "java.lang.String", "name": "run.dir", "reconfigurable": false, "description": "Directory for this software to be run from"}, {"type": "java.lang.Boolean", "name": "setup.latch", "reconfigurable": false, "description": "Latch for blocking setup until ready"}, {"defaultValue": {}, "type": "java.util.Map", "name": "shell.env", "reconfigurable": false, "description": "Map of environment variables to pass to the runtime shell"}, {"defaultValue": "org.apache.brooklyn.entity.software.base.SoftwareProcessDriverLifecycleEffectorTasks@5d59d69c", "type": "org.apache.brooklyn.entity.software.base.SoftwareProcessDriverLifecycleEffectorTasks", "name": "softwareProcess.lifecycleTasks", "reconfigurable": false, "description": "An object that handles lifecycle of an entity's associated machine."}, {"defaultValue": "10s", "type": "org.apache.brooklyn.util.time.Duration", "name": "softwareProcess.maxSensorRebindDelay", "reconfigurable": false, "description": "The maximum delay to apply when reconnecting sensors when rebinding to this entity. Brooklyn will wait a random amount of time, up to the value of this config key, to avoid a thundering herd problem when the entity shares its machine with several others. Set to null or to 0 to disable any delay."}, {"type": "java.lang.Boolean", "name": "start.latch", "reconfigurable": false, "description": "Latch for blocking start until ready"}, {"defaultValue": "2m", "type": "org.apache.brooklyn.util.time.Duration", "name": "start.timeout", "reconfigurable": false, "description": "Time to wait for process and for SERVICE_UP before failing (in seconds, default 2m)"}, {"defaultValue": false, "type": "java.lang.Boolean", "name": "stopIptables", "reconfigurable": false, "description": "Whether to stop iptables entirely; if true then ssh in to stop the iptables service, as part of machine provisioning"}, {"type": "java.util.Map", "name": "templates.install", "reconfigurable": false, "description": "Mapping of templates, to be filled in and copied before install, to destination name relative to installDir"}, {"type": "java.util.Map", "name": "templates.preinstall", "reconfigurable": false, "description": "Mapping of templates, to be filled in and copied before pre-install, to destination name relative to installDir"}, {"type": "java.util.Map", "name": "templates.runtime", "reconfigurable": false, "description": "Mapping of templates, to be filled in and copied before customisation, to destination name relative to runDir"}], "description": "Deploys a Brooklyn management server"}]}